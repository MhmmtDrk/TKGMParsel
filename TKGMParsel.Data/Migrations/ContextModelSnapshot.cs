// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TKGMParsel.Data.Contexts;

#nullable disable

namespace TKGMParsel.Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TKGMParsel.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("Varchar(50)");

                    b.Property<int?>("TKGMValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("Varchar(50)");

                    b.Property<int?>("TKGMCityValue")
                        .HasColumnType("int");

                    b.Property<int?>("TKGMValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("alan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("durum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gittigiParselListe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gittigiParselSebep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ilAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ilId")
                        .HasColumnType("int");

                    b.Property<string>("ilceAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ilceId")
                        .HasColumnType("int");

                    b.Property<string>("mahalleAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mahalleId")
                        .HasColumnType("int");

                    b.Property<string>("mevkii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nitelik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pafta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("parselId")
                        .HasColumnType("int");

                    b.Property<string>("parselNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zeminId")
                        .HasColumnType("int");

                    b.Property<string>("zeminKmdurum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parsel");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("Varchar(50)");

                    b.Property<int?>("TKGMDistrictValue")
                        .HasColumnType("int");

                    b.Property<int?>("TKGMValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.District", b =>
                {
                    b.HasOne("TKGMParsel.Data.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.Street", b =>
                {
                    b.HasOne("TKGMParsel.Data.Entities.District", "District")
                        .WithMany("Streets")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("TKGMParsel.Data.Entities.District", b =>
                {
                    b.Navigation("Streets");
                });
#pragma warning restore 612, 618
        }
    }
}
